" ========= VimPlug Plugins =========
call plug#begin('~/.vim/plugged')

" Languages
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'keith/swift.vim'
Plug 'wlangstroth/vim-racket'
Plug 'fatih/vim-go'
Plug 'mustache/vim-mustache-handlebars'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'

" File browsing
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } | Plug 'junegunn/fzf.vim'
Plug 'jlanzarotta/bufexplorer'

" HUD annotations
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Typing
Plug 'chaoren/vim-wordmotion'
Plug 'tpope/vim-commentary'
Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'

" Behind-the-scenes
Plug 'tpope/vim-dispatch'

call plug#end()


" ========= General Options =========

" Use UTF-8
set encoding=utf-8

" Highlight
syntax on
set hlsearch

" Line numbers
set number

" Delete like normal
set backspace=indent,eol,start

" Don't beep on errors
set visualbell
set t_vb=

" Map leader to backslash
let mapleader="\\"

" Wrap lines
set wrap

" Word wrap on line break
set linebreak

" Show as much of wrapped lines going off the screen as possible
set display+=lastline

" Minimum window height/width
set winheight=4 winminheight=4
set winwidth=15 winminwidth=15

" Allow unsaved buffers to be hidden
set hidden

" Completion style
set completeopt=longest,menuone

" Map .md files to markdown
au BufNewFile,BufFilePre,BufRead *.md setlocal filetype=markdown

" Auto-resize splits when resizing vim generally
autocmd VimResized * wincmd =

" Set up highlight group & retain through colorscheme changes
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Highlight trailing whitespace
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd BufRead,InsertLeave * match ExtraWhitespace /\s\+$/

" Autoremove trailing spaces when saving the buffer
" Don't do it for Go - let GoFmt handle that
fun! StripTrailingWhitespace()
    if &ft =~ 'go'
        return
    endif
    %s/\s\+$//e
endfun
autocmd BufWritePre * call StripTrailingWhitespace()

" New panes to right and bottom
set splitright

" Tabs and indents
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
set smarttab
set autoindent
set cindent
set smartindent

" Four space tabs for Python
autocmd FileType python setlocal tabstop=4 shiftwidth=4

" Seach case-sensitive if capital in pattern, otherwise insensitive
set ignorecase
set smartcase

" Incremental search
set incsearch

" Bash-style completions for file names
set wildmode=longest,list,full
set wildmenu

" Ignores
set wildignore+=*.pyc,*.o,*.class,*.lo,.git,out,node_modules,dist,venv,vendor,*.swp

" Buffer space around cursor when scrolling
set scrolloff=2


" ========= Colors =========

" Background color
set background=dark

" Colors
silent! colorscheme molokai
let g:molokai_original = 1

" Use transparent background
hi Normal ctermbg=NONE

" Terminal color adjustments
set t_Co=256
let g:solarized_termcolors=256

" Don't highlight with terrible colors
hi Search cterm=NONE ctermfg=grey ctermbg=blue
hi MatchParen cterm=NONE ctermfg=grey ctermbg=blue
hi Error cterm=NONE ctermfg=white ctermbg=red
hi SpellBad cterm=NONE ctermfg=white ctermbg=red


" ========= Plugin Configuration =========

" Airline
let g:airline_theme='cool'
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1      " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t'  " Show just the filename

" Airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

" NERDTree
let NERDTreeMapOpenSplit='\t'
let NERDTreeRespectWildIgnore=1
let g:NERDTreeWinSize=25
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Typescript
let g:typescript_indent_disable = 0
autocmd FileType typescript setlocal completeopt+=menu,preview  " autocomplete

" Autoclose HTML
let g:closetag_filenames = "*.html, *.hbs, *.handlebars"

" Vim-Go
let g:go_fmt_command = "goimports"
let g:go_doc_keywordprg_enabled = 0

" Auto-Pairs
let g:AutoPairsMultilineClose = 0

" Vim-Rust
let g:rustfmt_autosave = 1
let g:rustfmt_options = "-f"
let g:racer_experimental_completer = 1


" ========= Remappings =========

" Enter command mode
inoremap jk <esc>

" Buffers
nmap <leader>t :enew<CR>
nmap <leader>= :bnext<CR>
nmap <leader>- :bprevious<CR>
nmap <leader>w :bprevious <BAR> bd #<CR>

" Tabs
nmap <leader>T :tabe %<CR>
nmap <leader>+ :tabnext<CR>
nmap <leader>_ :tabprevious<CR>
nmap <leader>W :tabclose<CR>

" Nuke scroll wheel spam characters
noremap <ScrollWheelUp> <nop>
inoremap <ScrollWheelUp> <nop>
noremap <ScrollWheelDown> <nop>
inoremap <ScrollWheelDown> <nop>

" Jump paragraphs using capital J and K
nnoremap J }
vnoremap J }
nnoremap K {
vnoremap K {

" Move by display lines
nnoremap <silent> k gk
nnoremap <silent> j gj

" Jump around lines
noremap z $
noremap Z ^

" Copy to system (only applicable on Mac)
noremap <leader>y "*y

" Toggle NERDTree
nmap <leader>nt :NERDTreeToggle<CR>

" Focus NERDTree
nmap <leader>nf :NERDTreeFocus<CR>

" Open FZF file finder
map <C-p> :Files<CR>

" Subword motion
let g:wordmotion_mappings = {
			\ 'w' : 'gw',
			\ 'b' : 'gb',
			\ 'e' : 'ge',
			\ 'ge' : '',
			\ 'aw' : '',
			\ 'iw' : ''
\ }

" Remap Omni-Completion
inoremap <C-X><C-N> <C-X><C-O><Down>

" Omnicompletion use Enter to select an entry
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" Vim-Racer mappings
au FileType rust command! RustDef execute "normal \<Plug>(rust-def)"
au FileType rust command! RustDefSplit execute "normal \<Plug>(rust-def-split)"
au FileType rust command! RustDefVSplit execute "normal \<Plug>(rust-def-vertical)"
au FileType rust command! RustDoc execute "normal \<Plug>(rust-doc)"


" ========= Custom Commands =========

" Use ripgrep and fzf to search for terms
if executable('rg')
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif
